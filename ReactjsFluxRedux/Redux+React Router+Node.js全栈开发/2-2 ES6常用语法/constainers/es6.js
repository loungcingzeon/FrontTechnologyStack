import { name, sayHelloA  } from './modulea';export function comest(){    //  变量    {        let name = 'imooc';        console.log(name);  // imooc    }    // const 定义常量    {        const name = 'httpS://www.baidu.com';        console.log(name);  // httpS://www.baidu.com    }    // `` 模板字符串    {        let name = 'imooc';        const template =`我来自北京${name}`;        console.log(template);  // 我来自北京imooc    }    // TODO: 函数扩展    {        // ES6 中函数的用法            // 参数默认值            // 箭头函数                function hello ( name){                    console.log(`hello ${name}`);                }                hello('imooc');                const hellos = (name) => {                    console.log(`hello ${name}`);                }                hellos('imooc IP付款');                setTimeout(() => {                    console.log('xxx');                }, 1000)                const double = x => x * 2;                console.log(double(5)); // 10                const helloa = (name='imooc') =>{                    console.log(`hello ${name}`);                }                helloa();                helloa('woniu');            // 展开运算符                function saya(name1, name2){                    console.log(name1, name2);                }                let arr = ['immoc..1', 'woniu..2'];                saya.apply(null, arr);  // immoc..1 woniu..2                saya(...arr);           // immoc..1 woniu..2    }    // 对象扩展    /**     * Object扩展     *     *  Object.keys、values、entries     *     *  对象方法简写，计算属性     *     *  展开运算符(不是ES6标准，但是babel也支持)     */    {        // Object.keys、values、entries        const obj = {            name:'immoc',            course:'React开发APP',        }        console.log(Object.keys(obj));  // ["name", "course"]        console.log(Object.values(obj));// ["immoc", "React开发APP"]        console.log(Object.entries(obj));        /*            0:(2) ["name", "immoc"]            1:(2) ["course", "React开发APP"]        */        const namea = 'immoc';        const obja = {        }        obja[namea] = 'hello immoc';        console.log(obja);  // {immoc: "hello immoc"}        // 对象方法简写，计算属性        const nameb = 'ccc';        const objc = {            nameb,            [namea]:'hello深圳',            hello: function(){            },            helloa(){            }        }        console.log(objc); // {immoc: "hello深圳"}        console.log(objc); // {nameb: "ccc", immoc: "hello深圳", hello: ƒ, helloa: ƒ}        const obje = {name:'imooc', course:'react'};        const objf = {type:'it', name:'world'};        const objg = {...obje, ...objf, date:'2018'};        console.log(objg); // {name: "world", course: "react", type: "it", date: "2018"}        // 展开运算符(不是ES6标准，但是babel也支持)        const arr1 = ['hello', 'imooc'];        //let arg1 = arr[0];        //let arg2 = arr[1];        let [arg1, arg2] = arr1;        console.log(arg1, '|', arg2); // hello imooc        const obj1 = {name:'imooc', course:'react'};        const {name, course} = obj1;        console.log(name, course);  // imooc react    }    // TODO: 类    {        /**         * 提供 class 的语法糖         *      是 prototype 的语法糖         *         *      Extends 继承         *         *      constructor 构造函数         */        // class        class MyApp {            constructor(){                this.name = 'imooc'            }            sayHello(){                console.log(`hello ${this.name}`);            }        }        const app = new MyApp();        app.sayHello(); // hello imooc    }    // TODO：新的数据结构    {        /**         * ES6 中新出现的数据结构         *     Set, 元素不可重合         *         *     Map         *         *     Symbol         *         */    }    // TODO: 模块化    /**     *  ES6中自带了模块化机制，告别seajs和require.js     *     *      Import, import{}     *     *      Export、Export default     *     *      Node现在还不支持， 还需要用require来加载文件     */    console.log(name);  // imooc    sayHelloA();        // hello rocks!    // TODO: 其支持对象扩展符和装饰器    /**     * babel-plugin-transform-object-rest-spread插件，支持扩展符号     *     * 装饰器     *     * Async await     */    // TODO: ES6其他特性    /**     * 其它的特性     *  Promise     *     *  迭代器和生成器     *     *  代理Proxy     */    // TODO：常见代码片段    {        // 数组        // 遍历数组        [1,2,3].forEach(function(value, index){            console.log(value); // 1 , 2 , 3        })        // 映射新数组        {            const arr = [1, 2, 3].map(v => v * 2);            console.log(arr);   // [2, 4, 6]        }        // 所有元素是否通过测试        {            const arr = [1, 2, 3].every(v => v > 3);            console.log(arr);   // false        }        // 所有元素是否通过测试        {            const arr = [1, 2, 3].some(v => v > 3);            console.log(arr);   // false        }        // 过滤数组        {            const arr = [1, 2, 3, 4, 5].filter(v => v > 3);            console.log(arr);   // [4, 5]        }        // 查找符合条件的元素        {            const arr = [{name:'dashent', age:18}, {name:'rmos', age:1}];            console.log(arr);        }        // 查的索引        {            const arr = [1, 2, 3].indexOf(2);            console.log(arr);   // 1        }        // 连接数级        {            const arry1 = [1, 2, 3];            const arry2 = [4, 5, 6];            const arry3 = [...arry1, ...arry2];            console.log(arry3); // [1, 2, 3, 4, 5, 6]        }        // 数组去重        {            const arr = [1, 2, 3, 4, 5, 1, 4, 2];            const sets = [...new Set(arr)];            console.log(sets);  // [1, 2, 3, 4, 5]        }        {            const arr = [1, 2, 3, 4, 5, 1, 4, 2];            [...arr].map((item, index) => {                console.log(item, index);            });        }    }}